- name: Gather facts
  setup:

- include_tasks: packages.yml

- name: Add or modify nofile soft limit for the wildcard (*) domain
  community.general.pam_limits:
    domain: '*'
    limit_type: soft
    limit_item: nofile
    value: 1048576

- name: Add or modify nofile hard limit for the wildcard (*) domain
  community.general.pam_limits:
    domain: '*'
    limit_type: hard
    limit_item: nofile
    value: 1048576

- name: Add or modify nofile soft limit for the root domain
  community.general.pam_limits:
    domain: root
    limit_type: soft
    limit_item: nofile
    value: 1048576

- name: Add or modify nofile hard limit for the root domain
  community.general.pam_limits:
    domain: root
    limit_type: hard
    limit_item: nofile
    value: 1048576

- name: add or modify nproc soft limit for the wildcard (*) domain
  community.general.pam_limits:
    domain: '*'
    limit_type: soft
    limit_item: nproc
    value: 1048576

- name: add or modify nproc hard limit for the wildcard (*) domain
  community.general.pam_limits:
    domain: '*'
    limit_type: hard
    limit_item: nproc
    value: 1048576

- name: add or modify nproc soft limit for the root domain
  community.general.pam_limits:
    domain: root
    limit_type: soft
    limit_item: nproc
    value: 1048576

- name: add or modify nproc hard limit for the root domain
  community.general.pam_limits:
    domain: root
    limit_type: hard
    limit_item: nproc
    value: 1048576

- name: remove unattended-upgrades
  ansible.builtin.apt:
    name: unattended-upgrades
    state: absent

- name: check if swap size is more than 16GB
  ansible.builtin.shell: free -m | grep Swap | awk '{print $2}'
  register: swap_size
  changed_when: false
  failed_when: false

- name: create swap file
  ansible.builtin.shell: |
    fallocate -l 16G /swapfile
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    echo "/swapfile swap swap defaults 0 0" >> /etc/fstab
  when: swap_size.stdout | int <= 16000

- name: change swappiness to 10
  ansible.builtin.sysctl:
    name: vm.swappiness
    value: 10
    state: present
    reload: yes

- name: change vfs_cache_pressure to 50
  ansible.builtin.sysctl:
    name: vm.vfs_cache_pressure
    value: 50
    state: present
    reload: yes

- name: check if chia-blockchain venv is installed
  ansible.builtin.blockinfile:
    path: /root/.bashrc
    block: |
      while [[ "$(which chia)" == "" ]]; do
        . /opt/chia-blockchain/activate
      done
  register: chia_venv

- name: check if chia-blockchain repo is installed
  ansible.builtin.stat:
    path: /opt/chia-blockchain
  register: chia_installed

- name: check chia-blockchain binary installed
  ansible.builtin.stat:
    path: /opt/chia-blockchain/venv/bin/
  register: chia_binary

- name: check if yq is installed
  ansible.builtin.stat:
    path: /usr/local/bin/yq
  register: yq_installed

- name: install yq for amd64
  ansible.builtin.shell: |
    wget https://github.com/mikefarah/yq/releases/download/v4.40.4/yq_linux_amd64 -O /usr/local/bin/yq
    chmod +x /usr/local/bin/yq
  when: ansible_architecture == "x86_64" and yq_installed.stat.exists == false

- name: install yq for arm64
  ansible.builtin.shell: |
    wget https://github.com/mikefarah/yq/releases/download/v4.40.4/yq_linux_arm64 -O /usr/local/bin/yq
    chmod +x /usr/local/bin/yq
  when: ansible_architecture == "aarch64" and yq_installed.stat.exists == false

- name: copy ca dir to /root/
  ansible.builtin.copy:
    src: main/assets/ca
    dest: /root/
    mode: 0755

- name: check if all required directories are created
  ansible.builtin.stat:
    path: '{{ dir }}'
  register: dir_exists
  loop:
    - /root/.config/rclone
    - /root/.worker
    - /root/.worker/mount
    - /root/.worker/log
    - /root/.worker/log/mount
    - /storj-bucket
  loop_control:
    loop_var: dir

- name: create required directories if not exists
  ansible.builtin.file:
    path: '{{ item.dir }}'
    state: directory
    mode: '0755'
  loop: '{{ dir_exists.results }}'
  when: item.stat.exists == false

- name: install and set custom chia-blockchain
  block:
    - name: Clone chia repository
      ansible.builtin.git:
        repo: https://github.com/Chia-Network/chia-blockchain
        dest: /opt/chia-blockchain
        version: 2.1.4
        force: yes

    - name: Copy install-plotter.sh
      ansible.builtin.copy:
        src: main/assets/install-plotter.sh
        dest: /opt/chia-blockchain/install-plotter.sh
        mode: 0755

    - name: Copy check_plots.py
      ansible.builtin.copy:
        src: main/assets/check_plots.py
        dest: /opt/chia-blockchain/chia/plotting/check_plots.py

    - name: Install Chia
      ansible.builtin.shell: |
        cd /opt/chia-blockchain
        DEBIAN_FRONTEND=noninteractive
        bash install.sh -p
        . ./activate
        chia init -c /root/ca && chia plots add -d /storj-bucket
        chia configure --set-farmer-peer {{ FARMEROST }}:{{ FARMERPORT }}
        chia configure --set-log-level INFO
        yq -i '.harvester.recursive_plot_scan = true' ~/.chia/mainnet/config/config.yaml

    - name: set venv chia on /root/.bashrc
      ansible.builtin.blockinfile:
        path: /root/.bashrc
        block: |
          while [[ "$(which chia)" == "" ]]; do
            . /opt/chia-blockchain/activate
          done

  when: chia_binary.stat.exists == false and chia_venv.changed == true and chia_installed.stat.exists == false

- name: add alias flog to bashrc
  ansible.builtin.blockinfile:
    path: /root/.bashrc
    block: |
      alias flog='tail -f /root/.chia/mainnet/log/debug.log'

- name: Check if rclone is installed
  command: which rclone
  register: rclone_installed
  ignore_errors: true

- name: Install rclone
  ansible.builtin.shell: curl https://rclone.org/install.sh | sudo bash
  when: rclone_installed.rc != 0

- name: Copy rclone.conf
  ansible.builtin.copy:
    src: main/assets/rclone.conf
    dest: /root/.config/rclone/rclone.conf
    mode: 0600

- name: copy clear_ram
  ansible.builtin.copy:
    src: main/assets/clear_ram
    dest: /usr/local/bin/clear_ram
    mode: 0755

- name: Ensure directory exists
  ansible.builtin.file:
    path: /root/.worker
    state: directory

- name: create empty env file
  ansible.builtin.shell: echo "" > /root/.worker/env

- name: saving env to ~/.worker/env file
  ansible.builtin.blockinfile:
    path: /root/.worker/env
    block: |
      BASEURL={{ BASEURL }}
      APIKEY={{ APIKEY }}
      PLOTTER={{ PLOTTER }}
      FARMEROST={{ FARMEROST }}
      FARMERPORT={{ FARMERPORT }}
      CACHESIZE={{ CACHESIZE }}

- name: copy mountRclone.sh to /root/
  ansible.builtin.copy:
    src: main/assets/mountRclone.sh
    dest: /root/mountRclone.sh
    mode: 0755

- name: Copy directory to host
  ansible.builtin.copy:
    src: 'main/assets/mount/{{ item }}/.'
    dest: '/root/.worker/mount/'
    mode: 0755
  loop:
    - hvr1
    - hvr2
    - hvr3
  when: inventory_hostname == item
